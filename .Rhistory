plate
plate$summary()
library(PvstatemPackage)
plate <- read_data(kenya_filepath, verbose=TRUE)
plate$summary()
library(PvstatemPackage)
plate <- read_data(kenya_filepath, verbose=TRUE)
plate$summary()
plate$summary(include_names = FALSE)
library(PvstatemPackage)
plate <- read_data(kenya_filepath, verbose=TRUE)
oise_filepath <- system.file("extdata", "OISE.csv", package = "PvstatemPackage", mustWork = TRUE)
oise_layout_filepath <- system.file("extdata", "OISE_layout.xlsx", package = "PvstatemPackage", mustWork = TRUE)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath, check_plate = FALSE)
library(PvstatemPackage)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath, check_plate = FALSE)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath)
library(PvstatemPackage)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath)
library(PvstatemPackage)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath)
library(PvstatemPackage)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath)
library(PvstatemPackage)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath)
plate$warnings
lapply(plate$samples, function(sample) sample$warnings)
lapply(plate$samples, function(sample) sample$warnings, indexes = plate$sample_names)
?lapply
lplapply(plate$samples, function(sample) sample$warnings, indexes = plate$sample_names)
plate$sample_names[1]
library(PvstatemPackage)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath)
plate$warnings
plate$errors
remove_empty_lists <- function(lst) {
# Filter out elements that are empty lists
result <- lst[!sapply(lst, function(x) is.list(x) && length(x) == 0)]
return(result)
}
remove_empty_lists(plate$errors)
library(PvstatemPackage)
remove_empty_lists(plate$errors)
plate$errors
kenya_filepath <- system.file("extdata", "kenya.csv", package = "PvstatemPackage", mustWork = TRUE)
plate <- read_data(kenya_filepath, verbose=FALSE)
plate <- read_data(kenya_filepath)
plate$warnings
plate$get_sample(14)
oise_filepath <- system.file("extdata", "OISE.csv", package = "PvstatemPackage", mustWork = TRUE)
oise_layout_filepath <- system.file("extdata", "OISE_layout.xlsx", package = "PvstatemPackage", mustWork = TRUE)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath, check_plate = FALSE, verbose=FALSE)
plate
plot_standard_curve_antibody(plate)
plate$blank_adjustment()
plot_standard_curve_antibody(plate)
plate$analyte_names
plot_standard_curve_antibody(plate, "spike")
plates <- plate
if (inherits(plates, "Plate")) { # an instance of Plate
plates <- list(plates)
}
if (!inherits(plates, "list")){
stop("plates object should be a plate or a list of plates")
}
for( plate in plates ){
if (!inherits(plate, "Plate")){
stop("plates object should be a plate or a list of plates")
}
}
plates
dilutions_numeric_base <- NULL
standard_curve_num_samples <- NULL
standard_curve_values_list <- list()
if (!plate$check_if_blanks_already_adjusted) {
stop("Consider adjusting the blank values using function `plate$blank_adjustment()")
}
standard_curves <- plate$get_sample_by_type("POSITIVE CONTROL")
if (is.null(standard_curve_num_samples)) {
standard_curve_num_samples = length(standard_curves)
} else if (standard_curve_num_samples != length(standard_curves)) {
stop("Inconsistent number of positive control samples accross plates")
}
if (!antibody_name %in% plate$analyte_names){
stop("Antibody ", antibody_name, " not present in the plate")
}
antibody_name <- "spike"
dilutions <- sapply(standard_curves, function(sample) sample$sample_type$character_dilution_factor)
dilutions <- sapply(standard_curves, function(sample) sample$sample_type$character_dilution_factor)
dilutions_numeric <- sapply(standard_curves, function(sample) sample$sample_type$dilution_factor)
# sort values according to dilutions
sorted_order <- order(dilutions_numeric)
# Sort the vectors according to the sorted order of the reference vector
dilutions_numeric <- dilutions_numeric[sorted_order]
dilutions <- dilutions[sorted_order]
standard_curves <- standard_curves[sorted_order]
if (is.null(dilutions_numeric_base)) {
dilutions_numeric_base <- dilutions_numeric
}
curve_values <- sapply(standard_curves, function(sample) sample$data[data_type, antibody_name])
if (any(is.na(curve_values))){
stop(data_type, " not present in the dataframe")
}
standard_curve_values_list = append(standard_curve_values_list, list(curve_values))
?brewer.pal
if (length(plates) >= 3)
colors <- RColorBrewer::brewer.pal(length(plates), "Set1")
else
if (length(plates) >= 3){
colors <- RColorBrewer::brewer.pal(length(plates), "Set1")
}else {
colors <- c("red", "blue")
}
colors
par(mfrow=c(1,1))
plot(log(dilutions_numeric), standard_curve_values_list[[1]], type = "o", lwd=2, main=plot_name, xlab="dilutions", ylab = data_type, col=colors[[1]],axes=F,bty='L', pch=19,
ylim = c(min(unlist(standard_curve_values_list)), max(unlist(standard_curve_values_list))))
dilutions_numeric
dilutions <- sapply(standard_curves, function(sample) sample$sample_type$character_dilution_factor)
standard_curves
standard_curves <- plate$get_sample_by_type("POSITIVE CONTROL")
standard_curves
plate
plate$summary()
library(PvstatemPackage)
oise_filepath <- system.file("extdata", "OISE.csv", package = "PvstatemPackage", mustWork = TRUE)
oise_layout_filepath <- system.file("extdata", "OISE_layout.xlsx", package = "PvstatemPackage", mustWork = TRUE)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath, check_plate = FALSE, verbose=FALSE)
plate$summary()
library(PvstatemPackage)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath, check_plate = FALSE, verbose=FALSE)
library(PvstatemPackage)
library(PvstatemPackage)dilution
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath, check_plate = FALSE, verbose=FALSE)
plate <- read_data(oise_filepath, layout_file_path = oise_layout_filepath)
plate$summary()
plot_standard_curve_antibody(plate, "spike")
plate$blank_adjustment()
plot_standard_curve_antibody(plate, "spike")
plates <- list(plate)
for (i in 2:length(plates)) {
lines(log(dilutions_numeric), standard_curve_values_list[[i]], type = "o", lwd = 2, col = colors[[i]])
}
for (plate in plates){
if (!plate$check_if_blanks_already_adjusted) {
stop("Consider adjusting the blank values using function `plate$blank_adjustment()")
}
standard_curves <- plate$get_sample_by_type("POSITIVE CONTROL")
if (is.null(standard_curve_num_samples)) {
standard_curve_num_samples = length(standard_curves)
} else if (standard_curve_num_samples != length(standard_curves)) {
stop("Inconsistent number of positive control samples accross plates")
}
if (!antibody_name %in% plate$analyte_names){
stop("Antibody ", antibody_name, " not present in the plate")
}
dilutions <- sapply(standard_curves, function(sample) sample$sample_type$character_dilution_factor)
dilutions_numeric <- sapply(standard_curves, function(sample) sample$sample_type$dilution_factor)
# sort values according to dilutions
sorted_order <- order(dilutions_numeric)
# Sort the vectors according to the sorted order of the reference vector
dilutions_numeric <- dilutions_numeric[sorted_order]
dilutions <- dilutions[sorted_order]
standard_curves <- standard_curves[sorted_order]
if (is.null(dilutions_numeric_base)) {
dilutions_numeric_base <- dilutions_numeric
}
else if(!all.equal(dilutions_numeric_base, dilutions_numeric)) {
stop("Inconsistent dilutions accross plates")
}
curve_values <- sapply(standard_curves, function(sample) sample$data[data_type, antibody_name])
if (any(is.na(curve_values))){
stop(data_type, " not present in the dataframe")
}
standard_curve_values_list = append(standard_curve_values_list, list(curve_values))
}
if (inherits(plates, "Plate")) { # an instance of Plate
plates <- list(plates)
}
if (!inherits(plates, "list")){
stop("plates object should be a plate or a list of plates")
}
for( plate in plates ){
if (!inherits(plate, "Plate")){
stop("plates object should be a plate or a list of plates")
}
}
dilutions_numeric_base <- NULL
standard_curve_num_samples <- NULL
standard_curve_values_list <- list()
for (plate in plates){
if (!plate$check_if_blanks_already_adjusted) {
stop("Consider adjusting the blank values using function `plate$blank_adjustment()")
}
standard_curves <- plate$get_sample_by_type("POSITIVE CONTROL")
if (is.null(standard_curve_num_samples)) {
standard_curve_num_samples = length(standard_curves)
} else if (standard_curve_num_samples != length(standard_curves)) {
stop("Inconsistent number of positive control samples accross plates")
}
if (!antibody_name %in% plate$analyte_names){
stop("Antibody ", antibody_name, " not present in the plate")
}
dilutions <- sapply(standard_curves, function(sample) sample$sample_type$character_dilution_factor)
dilutions_numeric <- sapply(standard_curves, function(sample) sample$sample_type$dilution_factor)
# sort values according to dilutions
sorted_order <- order(dilutions_numeric)
# Sort the vectors according to the sorted order of the reference vector
dilutions_numeric <- dilutions_numeric[sorted_order]
dilutions <- dilutions[sorted_order]
standard_curves <- standard_curves[sorted_order]
if (is.null(dilutions_numeric_base)) {
dilutions_numeric_base <- dilutions_numeric
}
else if(!all.equal(dilutions_numeric_base, dilutions_numeric)) {
stop("Inconsistent dilutions accross plates")
}
curve_values <- sapply(standard_curves, function(sample) sample$data[data_type, antibody_name])
if (any(is.na(curve_values))){
stop(data_type, " not present in the dataframe")
}
standard_curve_values_list = append(standard_curve_values_list, list(curve_values))
}
data_type = "Net MFI"
for (plate in plates){
if (!plate$check_if_blanks_already_adjusted) {
stop("Consider adjusting the blank values using function `plate$blank_adjustment()")
}
standard_curves <- plate$get_sample_by_type("POSITIVE CONTROL")
if (is.null(standard_curve_num_samples)) {
standard_curve_num_samples = length(standard_curves)
} else if (standard_curve_num_samples != length(standard_curves)) {
stop("Inconsistent number of positive control samples accross plates")
}
if (!antibody_name %in% plate$analyte_names){
stop("Antibody ", antibody_name, " not present in the plate")
}
dilutions <- sapply(standard_curves, function(sample) sample$sample_type$character_dilution_factor)
dilutions_numeric <- sapply(standard_curves, function(sample) sample$sample_type$dilution_factor)
# sort values according to dilutions
sorted_order <- order(dilutions_numeric)
# Sort the vectors according to the sorted order of the reference vector
dilutions_numeric <- dilutions_numeric[sorted_order]
dilutions <- dilutions[sorted_order]
standard_curves <- standard_curves[sorted_order]
if (is.null(dilutions_numeric_base)) {
dilutions_numeric_base <- dilutions_numeric
}
else if(!all.equal(dilutions_numeric_base, dilutions_numeric)) {
stop("Inconsistent dilutions accross plates")
}
curve_values <- sapply(standard_curves, function(sample) sample$data[data_type, antibody_name])
if (any(is.na(curve_values))){
stop(data_type, " not present in the dataframe")
}
standard_curve_values_list = append(standard_curve_values_list, list(curve_values))
}
plot_name <- paste0("Standard curve for ", antibody_name)
if (length(plates) >= 3){
colors <- RColorBrewer::brewer.pal(length(plates), "Set1")
}else {
colors <- c("red", "blue")
}
par(mfrow=c(1,1))
plot(log(dilutions_numeric), standard_curve_values_list[[1]], type = "o", lwd=2, main=plot_name, xlab="dilutions", ylab = data_type, col=colors[[1]],axes=F,bty='L', pch=19,
ylim = c(min(unlist(standard_curve_values_list)), max(unlist(standard_curve_values_list))))
for (i in 2:length(plates)) {
lines(log(dilutions_numeric), standard_curve_values_list[[i]], type = "o", lwd = 2, col = colors[[i]])
}
length(plates)
if (length(plates) > 1) {
for (i in 2:length(plates)) {
lines(log(dilutions_numeric), standard_curve_values_list[[i]], type = "o", lwd = 2, col = colors[[i]])
}
}
axis(1,at=c(log(dilutions_numeric),max(log(dilutions_numeric))+1),labels=c(dilutions,""),cex.axis=0.9)
axis(2,cex.axis=0.9)
legend("topleft", legend = paste("Plate", 1:length(plates)), col = colors, lty = 1, lwd = 2)
if (!is.null(file_path))
library(PvstatemPackage)
library(PvstatemPackage)
kenya_filepath1 <- system.file("extdata", "kenya.csv", package = "PvstatemPackage", mustWork = TRUE)
kenya_filepath6 <- system.file("extdata", "kenya_P6.csv", package = "PvstatemPackage", mustWork = TRUE)
kenya_filepath4 <- system.file("extdata", "kenya_P4.csv", package = "PvstatemPackage", mustWork = TRUE)
plate1 <- read_data(kenya_filepath1, verbose=FALSE)
plate6 <- read_data(kenya_filepath6, verbose=FALSE)
plate4 <- read_data(kenya_filepath4, verbose=FALSE)
plate1$blank_adjustment()
plate4$blank_adjustment()
plate6$blank_adjustment()
plates <- list(plate1, plate4, plate6)
expect_error(plot_standard_curve_antibody(plates, antibody_name = "Etramp5_ag1"), NA)
plot_standard_curve_antibody(plates, antibody_name = "Etramp5_ag1")
legend("topleft", legend = paste("Plate", 1:length(plates)), col = colors, lty = 1, lwd = 2)
plot_standard_curve_antibody(plate, antibody_name = "spike")
plot_standard_curve_antibody(plate, antibody_name = "S2")
library(PvstatemPackage)
plate <- read_data("../data/kenya.csv")
plate <- read_data("data/kenya.csv")
library(PvstatemPackage)
getwd()
setwd("C:/Users/tymot/Documents/praca/PvSTATEM/documentation")
plate <- read_data("data/kenya.csv")
oise_plate <- read_data("data/OISE.csv", layout_file_path = "OISE_layout.xlsx")
oise_plate <- read_data("data/OISE.csv", layout_file_path = "data/OISE_layout.xlsx")
setwd("C:/Users/tymot/Documents/praca/PvSTATEM/documentation")
plate <- read_data("data/kenya.csv")
plate$errors
plate
print(plate)
plate$summary()
oise_plate$summary()
oise_plate <- read_data("data/OISE.csv", layout_file_path = "data/OISE_layout.xlsx")
oise_plate$summary()
plate <- read_data("data/kenya.csv")
print(plate)
plate$summary()
print(plate$warnings)
print(plate$get_sample(14))
print(plate$get_sample(14)$warnings)
print(plate$get_sample(14)$errors)
print(plate$get_sample(14))
print(plate$sample_names)
plate$blank_adjustment()
print(plate$analyte_names)
plot_standard_curve_antibody(plate, antibody_name = "Etramp4_ag1")
plate <- read_data("data/kenya.csv")
print(plate)
plate$summary()
print(plate$get_sample(14))
print(plate$get_sample(14))
print(plate$sample_names)
print(plate$get_sample(14))
print(plate$sample_names)
print(plate$analyte_names)
plot_standard_curve_antibody(plate, antibody_name = "Etramp4_ag1")
plate$blank_adjustment()
plot_standard_curve_antibody(plate, antibody_name = "Etramp4_ag1")
plate1 <- read_data("data/kenya.csv", verbose=FALSE)
plate6 <- read_data("data/kenya_P4.csv", verbose=FALSE)
plate4 <- read_data("data/kenya_P6.csv", verbose=FALSE)
plate1$blank_adjustment()
plate4$blank_adjustment()
plate6$blank_adjustment()
plates <- list(plate1, plate4, plate6)
plot_standard_curve_antibody(plates, antibody_name = "Etramp4_ag1")
oise_plate <- read_data("data/OISE.csv", layout_file_path = "data/OISE_layout.xlsx")
oise_plate_without_layout <- read_data("data/OISE.csv")
oise_plate_without_layout$summary()
oise_plate$summary()
library(PvstatemPackage)
setwd("C:/Users/tymot/Documents/praca/PvSTATEM/documentation")
plate <- read_data("data/kenya.csv")
plate <- read_data("data/kenya.csv")
plate$summary()
sample
sample$warnings
print(plate$get_sample(14))
plate$warnings
plate$get_sample(14)$warnings
sample
plate$get_sample(96)$warnings
sample
sample$warnings
sample
print(plate$get_sample("A,1"))
print(plate$get_sample(1))
print(plate$get_sample(1)$warnings)
library(PvSTATEM)
library(PvSTATEM)
# TODO rename the package
# TODO regerences
setwd("C:/Users/tymot/Documents/praca/PvSTATEM/documentation")
plate <- read_data("data/kenya.csv")
print(plate)
plate$summary()
plate1 <- read_data("data/kenya.csv", verbose=FALSE)
plate6 <- read_data("data/kenya_P4.csv", verbose=FALSE)
plate4 <- read_data("data/kenya_P6.csv", verbose=FALSE)
plate6$summary()
library(PvSTATEM)
library(testthat)
library(PvSTATEM)
test_check("PvSTATEM")
library(PvSTATEM)
plate
print(plate)
plate$summary()
plate$get_sample(1)$warnings
plate$get_sample(1)
plate$warnings
plate$get_sample(1)$warnings
oise_plate_without_layout <- read_data("data/OISE.csv")
setwd("C:/Users/tymot/Documents/praca/PvSTATEM/documentation")
plate <- read_data("data/kenya.csv")
plate
print(plate)
plate$summary()
plate$get_sample(1)
plate$warnings
plate$get_sample(1)$warnings
## simple standard curve plotting ------------------------------------------
plot_standard_curve_antibody(plate, antibody_name = "Etramp4_ag1")
## multiple plates for plotting ---------------------------------------------------------
plate1 <- read_data("data/kenya.csv", verbose=FALSE)
plate6 <- read_data("data/kenya_P4.csv", verbose=FALSE)
plate4 <- read_data("data/kenya_P6.csv", verbose=FALSE)
plate1$blank_adjustment()
plate4$blank_adjustment()
plate6$blank_adjustment()
plates <- list(plate1, plate4, plate6)
plot_standard_curve_antibody(plates, antibody_name = "Etramp4_ag1")
oise_plate_without_layout <- read_data("data/OISE.csv")
oise_plate_without_layout$summary()
oise_plate <- read_data("data/OISE.csv", layout_file_path = "data/OISE_layout.xlsx")
oise_plate$summary()
oise_plate$blank_adjustment()
plot_standard_curve_antibody(oise_plate, "spike")
citation('Biobase')
plate <- read_data("data/kenya.csv")
gc()
plate <- read_data("data/kenya.csv")
# summary and statistics of the plate
plate
print(plate)
plate$summary()
plate$get_sample(1)
plate$get_sample_by_type("POSITIVE CONTROL")
plate$get_sample_by_type("POSITIVE CONTROL")[[1]]
plate$sample_names
plate$analyte_names
plate$warnings
plate$get_sample_by_type("POSITIVE CONTROL")[[1]]$warnings
plate$get_sample(1)$warnings
plate$get_sample_by_type("POSITIVE CONTROL")[[1]]$warnings
## simple standard curve plotting ------------------------------------------
plot_standard_curve_antibody(plate, antibody_name = "Etramp4_ag1")
## multiple plates for plotting ---------------------------------------------------------
plate1 <- read_data("data/kenya.csv", verbose=FALSE)
plate6 <- read_data("data/kenya_P4.csv", verbose=FALSE)
plate4 <- read_data("data/kenya_P6.csv", verbose=FALSE)
plate1$blank_adjustment()
plate4$blank_adjustment()
plate6$blank_adjustment()
plates <- list(plate1, plate4, plate6)
plot_standard_curve_antibody(plates, antibody_name = "Etramp4_ag1")
oise_plate_without_layout <- read_data("data/OISE.csv")
oise_plate_without_layout$summary()
oise_plate <- read_data("data/OISE.csv", layout_file_path = "data/OISE_layout.xlsx")
oise_plate$summary()
oise_plate$blank_adjustment()
plot_standard_curve_antibody(oise_plate, "spike")
plate$get_sample(1)
plate <- read_data("data/kenya.csv")
?plate
??plate
??Plate
plate$summary()
?Plate
?Plate
remove.packages("PvstatemPackage")
?Plate
update.packages()
Sys.setenv(LANG = "en")
??plate
plate <- read_data("data/kenya.csv")
plate <- read_data("data/kenya.csv")
Sys.setenv(LANG = "en")
demo()
cls
cls()
clear()
library(PvSTATEM)
# filepath were the data is stored
setwd("C:/Users/tymot/Documents/praca/PvSTATEM/documentation")
plate <- read_data("data/kenya.csv")
# summary and statistics of the plate
plate
print(plate)
plate$summary()
plate$get_sample(1)
plate$get_sample_by_type("POSITIVE CONTROL")[[1]]
print(sample)
plate$get_sample(1)$sample_type
plate$get_sample(1)$sample_type$dilution
plate$get_sample(1)$sample_type$dilution_factor
plate$get_sample(96)$sample_type
plate$get_sample(96)$sample_type
plate$get_sample(96)$sample_type
plate$warnings
plate$get_sample(1)$warnings
plate$get("GST", 1)
plate$warnings
plate$get_sample(1)$warnings
plate$get("GST", 1)
?Plate$get
??Plate
??PvSTATEM
?PvSTATEM
library(PvSTATEM)
?PvSTATEM
library(PvSTATEM)
?Plate
?Plate$get
plate$get(analyte = "GST", sample = 1)
??Plate$get
kenya_filepath <- system.file("extdata", "kenya.csv", package = "PvstatemPackage", mustWork = TRUE)
kenya_filepath <- system.file("extdata", "kenya.csv", package = "PvSTATEM", mustWork = TRUE)
plate <- read_data(kenya_filepath, verbose=FALSE)
initial_mfi_value = plate$samples[[1]]$data["Net MFI", "Etramp5_ag1"]
expect_equal(initial_mfi_value, 5595.5)
