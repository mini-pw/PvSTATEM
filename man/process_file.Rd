% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process-file.R
\name{process_file}
\alias{process_file}
\title{Process a File to Generate Normalised Data and Reports}
\usage{
process_file(
  plate_filepath,
  layout_filepath,
  output_dir = "output_data",
  format = "xPONENT",
  process_plate = TRUE,
  output_types = c("MFI", "RAU", "nMFI"),
  blank_adjustment = FALSE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{plate_filepath}{(\code{character(1)}) Path to the Luminex plate file.}

\item{layout_filepath}{(\code{character(1)}) Path to the corresponding layout file.}

\item{output_dir}{(\code{character(1)}, default = \code{'output_data'})
\itemize{
\item Directory where the output files will be saved.
\item If it does not exist, it will be created.
}}

\item{format}{(\code{character(1)}, default = \code{'xPONENT'})
\itemize{
\item Format of the Luminex data.
\item Available options: \code{'xPONENT'}, \code{'INTELLIFLEX'}.
}}

\item{process_plate}{(\code{logical(1)}, default = \code{TRUE})
\itemize{
\item If \code{TRUE}, processes the plate data using \code{\link[=process_plate]{process_plate()}}.
\item If \code{FALSE}, only reads the plate file and returns the plate object without processing.
}}

\item{output_types}{(\code{character()}, default = \code{c("MFI", "RAU", "nMFI")})
\itemize{
\item List of output types to generate
\item Supported values: \code{c("MFI", "RAU", "nMFI", "report")}.
}}

\item{blank_adjustment}{(\code{logical(1)}, default = \code{FALSE})
\itemize{
\item If \code{TRUE}, performs blank adjustment before processing.
}}

\item{verbose}{(\code{logical(1)}, default = \code{TRUE})
\itemize{
\item If \code{TRUE}, prints additional information during execution.
}}

\item{...}{Additional arguments passed to \code{\link[=read_luminex_data]{read_luminex_data()}} and \code{\link[=generate_plate_report]{generate_plate_report()}}.}
}
\value{
A \code{\link{Plate}} object containing the processed data.
}
\description{
This function reads a Luminex plate file by calling \code{\link[=read_luminex_data]{read_luminex_data()}} and then processes it by calling \code{\link[=process_plate]{process_plate()}}. It optionally generates also a quality control report using \code{\link[=generate_plate_report]{generate_plate_report()}}.
It reads the specified plate file, processes the plate object using all specified output types (including raw MFI values and quality control report), and saves the results.
\subsection{Workflow}{
\enumerate{
\item Read the plate file and layout file.
\item Process the plate data to generate a specific output types (\code{nMFI}, \code{RAU}), a simple output (\code{MFI}), or a report (\code{report}).
\item Save the processed data to CSV files in the specified \code{output_dir}. The files are named as \verb{\{plate_name\}_\{output_type\}.csv}.
\item Optionally, generate a quality control report. The report is saved as an HTML file in the \code{output_dir}, under the name \verb{\{plate_name\}_report.html}.
}
}
}
\examples{
# Example 1: Process a plate file with default settings (all normalisation types)
plate_file <- system.file("extdata", "CovidOISExPONTENT_CO_reduced.csv", package = "SerolyzeR")
layout_file <- system.file("extdata", "CovidOISExPONTENT_CO_layout.xlsx", package = "SerolyzeR")
example_dir <- tempdir(check = TRUE)
process_file(plate_file, layout_file, output_dir = example_dir)

# Example 2: Process the plate for only RAU normalisation
process_file(plate_file, layout_file, output_dir = example_dir, output_types = c("RAU"))

# Example 3: Process the plate and generate a quality control report
process_file(plate_file, layout_file, output_dir = example_dir, output_types = c("report"))

}
