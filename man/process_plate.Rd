% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process-plate.R
\name{process_plate}
\alias{process_plate}
\title{Process a plate and save output values to a CSV}
\usage{
process_plate(
  plate,
  output_path = NULL,
  normalisation_type = "RAU",
  data_type = "Median",
  adjust_blanks = FALSE,
  verbose = TRUE,
  reference_dilution = 1/400,
  ...
)
}
\arguments{
\item{plate}{(\code{Plate()}) a plate object}

\item{output_path}{(\code{character(1)}) path to save the computed dilutions.
If not provided the file will be saved in the working directory with the name \verb{\{normalisation_type\}_\{plate_name\}.csv}.
Where the \code{{plate_name}} is the name of the plate.}

\item{normalisation_type}{(\code{character(1)}) type of normalisation to use. Available options are:
\cr \code{c(RAU, nMFI)}.
In case}

\item{data_type}{(\code{character(1)}) type of data to use for the computation. Median is the default}

\item{adjust_blanks}{(\code{logical(1)}) adjust blanks before computing dilutions. Default is \code{FALSE}}

\item{verbose}{(\code{logical(1)}) print additional information. Default is \code{TRUE}}

\item{reference_dilution}{(\code{numeric(1)}) target dilution to use as reference for the nMFI normalisation. Ignored in case of RAU normalisation.
Default is \code{1/400}.
It should refer to a dilution of a standard curve sample in the given plate object.
This parameter could be either a numeric value or a string.
In case it is a character string, it should have format \verb{1/d+}, where \verb{d+} is any positive integer.}

\item{...}{Additional arguments to be passed to the fit model function (\code{create_standard_curve_model_analyte})}
}
\value{
a data frame with normalised values
}
\description{
Depending on the \code{normalisation_type} argument, the function will compute the RAU or nMFI values for each analyte in the plate.
\strong{RAU} is the default normalisation type.

The behavior of the function, in case of RAU normalisation type, can be summarized as follows:
\enumerate{
\item Adjust blanks if not already done.
\item Fit a model to each analyte using standard curve samples.
\item Compute RAU values for each analyte using the corresponding model.
\item Aggregate computed RAU values into a single data frame.
\item Save the computed RAU values to a CSV file.
}

More info about the RAU normalisation can be found in
\code{create_standard_curve_model_analyte} function documentation \link[PvSTATEM]{create_standard_curve_model_analyte} or in the Model reference \link[PvSTATEM]{Model}.

In case the normalisation type is \strong{nMFI}, the function will:
\enumerate{
\item Adjust blanks if not already done.
\item Compute nMFI values for each analyte using the target dilution.
\item Aggregate computed nMFI values into a single data frame.
\item Save the computed nMFI values to a CSV file.
}

More info about the nMFI normalisation can be found in \code{get_nmfi} function documentation \link[PvSTATEM]{get_nmfi}.
}
\examples{

plate_file <- system.file("extdata", "CovidOISExPONTENT.csv", package = "PvSTATEM")
layout_file <- system.file("extdata", "CovidOISExPONTENT_layout.csv", package = "PvSTATEM")

plate <- read_luminex_data(plate_file, layout_file)

tmp_dir <- tempdir(check = TRUE)
temporary_filepath <- file.path(tmp_dir, "output.csv")
process_plate(plate, output_path = temporary_filepath)
# create and save dataframe with computed dilutions

# nMFI normalisation
process_plate(plate, output_path = temporary_filepath,
      normalisation_type = "nMFI", reference_dilution = 1/400)

}
